import type { CreateExpressContextOptions } from '@trpc/server/adapters/express';
import type { CreateWSSContextFnOptions } from '@trpc/server/adapters/ws';
/**
 * Inner context - always available in procedures
 * Used for shared data like database connections
 */
export declare function createContextInner(verbose?: boolean, isMock?: boolean): Promise<{
    verbose: boolean;
    isMock: boolean;
    logger: import("../utils/logger").Logger;
}>;
/**
 * Context for Express HTTP requests
 */
export declare function createContext(opts: CreateExpressContextOptions, verbose?: boolean, isMock?: boolean): Promise<{
    req: import("express").Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
    res: import("express").Response<any, Record<string, any>>;
    verbose: boolean;
    isMock: boolean;
    logger: import("../utils/logger").Logger;
}>;
/**
 * Context for WebSocket connections
 */
export declare function createWSSContext(opts: CreateWSSContextFnOptions, verbose?: boolean, isMock?: boolean): Promise<{
    req: import("http").IncomingMessage;
    verbose: boolean;
    isMock: boolean;
    logger: import("../utils/logger").Logger;
}>;
export type Context = Awaited<ReturnType<typeof createContextInner>>;
