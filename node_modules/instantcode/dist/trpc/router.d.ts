export declare const router: import("@trpc/server").TRPCRouterBuilder<{
    ctx: {
        verbose: boolean;
        isMock: boolean;
        logger: import("../utils/logger").Logger;
    };
    meta: object;
    errorShape: import("@trpc/server").TRPCDefaultErrorShape;
    transformer: true;
}>;
export declare const publicProcedure: import("@trpc/server").TRPCProcedureBuilder<{
    verbose: boolean;
    isMock: boolean;
    logger: import("../utils/logger").Logger;
}, object, object, import("@trpc/server").TRPCUnsetMarker, import("@trpc/server").TRPCUnsetMarker, import("@trpc/server").TRPCUnsetMarker, import("@trpc/server").TRPCUnsetMarker, false>;
export declare const appRouter: import("@trpc/server").TRPCBuiltRouter<{
    ctx: {
        verbose: boolean;
        isMock: boolean;
        logger: import("../utils/logger").Logger;
    };
    meta: object;
    errorShape: import("@trpc/server").TRPCDefaultErrorShape;
    transformer: true;
}, import("@trpc/server").TRPCDecorateCreateRouterOptions<{
    health: import("@trpc/server").TRPCQueryProcedure<{
        input: void;
        output: {
            status: string;
            timestamp: string;
        };
        meta: object;
    }>;
    newChat: import("@trpc/server").TRPCMutationProcedure<{
        input: void;
        output: {
            success: boolean;
        };
        meta: object;
    }>;
    sendMessage: import("@trpc/server").TRPCSubscriptionProcedure<{
        input: {
            userPrompt: string;
            selectedElements: {
                index: number;
                tagName: string;
                xpath: string;
                cssSelector: string;
                textContent: string;
                attributes: Record<string, string>;
                children: any[];
                imagePath?: string | undefined;
                computedStyles?: {
                    width: number;
                    height: number;
                    fontSize: string;
                    fontFamily: string;
                    color?: string | undefined;
                    backgroundColor?: string | undefined;
                    display?: string | undefined;
                    position?: string | undefined;
                } | undefined;
                componentData?: {
                    componentLocation: string;
                    componentName?: string | undefined;
                    elementLocation?: {
                        file: string;
                        line: number;
                        column: number;
                        endLine?: number | undefined;
                        endColumn?: number | undefined;
                        source?: string | undefined;
                    } | undefined;
                    framework?: "vue" | "react" | "angular" | "svelte" | "vanilla" | undefined;
                    sourceMap?: {
                        originalLine: number;
                        originalColumn: number;
                        originalSource: string;
                        originalName?: string | undefined;
                    } | undefined;
                    sourceHierarchy?: string | undefined;
                } | undefined;
            }[];
            pageInfo: {
                url: string;
                title: string;
            };
            cwd?: string | undefined;
            sessionId?: string | undefined;
            consoleErrors?: string[] | undefined;
            consoleWarnings?: string[] | undefined;
            consoleInfo?: string[] | undefined;
        };
        output: AsyncIterable<{
            type: "system";
            subtype: "init";
            cwd: string;
            session_id: string;
            apiKeySource: string;
            mcp_servers: {
                name: string;
                status: string;
            }[];
            model: string;
            permissionMode: string;
            slash_commands: string[];
            tools: string[];
        } | {
            type: "assistant";
            message: {
                id: string;
                type: "message";
                role: "assistant";
                model: string;
                content: {
                    type: string;
                    text?: string | undefined;
                    id?: string | undefined;
                    name?: string | undefined;
                    input?: Record<string, unknown> | undefined;
                }[];
                stop_reason?: string | null | undefined;
                stop_sequence?: string | null | undefined;
                usage?: {
                    input_tokens: number;
                    output_tokens: number;
                    cache_creation_input_tokens?: number | undefined;
                    cache_read_input_tokens?: number | undefined;
                } | undefined;
            };
            parent_tool_use_id: string | null;
            session_id: string;
        } | {
            type: "user";
            message: {
                role: "user";
                content: {
                    type: string;
                    content?: string | undefined;
                    tool_use_id?: string | undefined;
                }[];
            };
            parent_tool_use_id: string | null;
            session_id: string;
        } | {
            type: "result";
            subtype: string;
            is_error: boolean;
            duration_ms: number;
            duration_api_ms: number;
            session_id: string;
            num_turns?: number | undefined;
            result?: string | undefined;
            total_cost_usd?: number | undefined;
            usage?: {
                input_tokens: number;
                output_tokens: number;
                cache_creation_input_tokens?: number | undefined;
                cache_read_input_tokens?: number | undefined;
            } | undefined;
            permission_denials?: {
                tool_name: string;
                tool_use_id: string;
                tool_input: Record<string, unknown>;
            }[] | undefined;
        }, void, any>;
        meta: object;
    }>;
    processElements: import("@trpc/server").TRPCMutationProcedure<{
        input: {
            elements: {
                index: number;
                tagName: string;
                xpath: string;
                cssSelector: string;
                textContent: string;
                attributes: Record<string, string>;
                children: any[];
                imagePath?: string | undefined;
                computedStyles?: {
                    width: number;
                    height: number;
                    fontSize: string;
                    fontFamily: string;
                    color?: string | undefined;
                    backgroundColor?: string | undefined;
                    display?: string | undefined;
                    position?: string | undefined;
                } | undefined;
                componentData?: {
                    componentLocation: string;
                    componentName?: string | undefined;
                    elementLocation?: {
                        file: string;
                        line: number;
                        column: number;
                        endLine?: number | undefined;
                        endColumn?: number | undefined;
                        source?: string | undefined;
                    } | undefined;
                    framework?: "vue" | "react" | "angular" | "svelte" | "vanilla" | undefined;
                    sourceMap?: {
                        originalLine: number;
                        originalColumn: number;
                        originalSource: string;
                        originalName?: string | undefined;
                    } | undefined;
                    sourceHierarchy?: string | undefined;
                } | undefined;
            }[];
            prompt?: string | undefined;
        };
        output: {
            componentLocations: string[];
            elementsCount: number;
            prompt: string | undefined;
        };
        meta: object;
    }>;
}>>;
export type AppRouter = typeof appRouter;
