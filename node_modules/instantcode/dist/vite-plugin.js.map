{
  "version": 3,
  "sources": ["../src/vite-plugin.ts"],
  "sourcesContent": ["import type { Plugin, ResolvedConfig } from 'vite';\nimport { spawn, ChildProcess } from 'node:child_process';\nimport { fileURLToPath } from 'node:url';\nimport { dirname, join } from 'node:path';\nimport { existsSync } from 'node:fs';\n\nexport interface InspectorPluginOptions {\n  /**\n   * Port to run the server on\n   * @default 7318\n   */\n  port?: number;\n  /**\n   * Address for the server to listen on\n   * @default 'localhost'\n   */\n  listenAddress?: string;\n  /**\n   * Public URL for reverse proxy scenarios\n   * @default Automatically determined from listenAddress and port\n   */\n  publicAddress?: string;\n  /**\n   * Verbose logging\n   * @default false\n   */\n  verbose?: boolean;\n  /**\n   * Enable mock mode (serve deterministic mock stream instead of real backend calls)\n   * @default false\n   */\n  mock?: boolean;\n}\n\nclass InspectorServerManager {\n  private serverProcess: ChildProcess | null = null;\n  private options: Required<InspectorPluginOptions>;\n  private packageDir: string;\n  private isDevelopment: boolean;\n\n  constructor(options: InspectorPluginOptions = {}) {\n    const port = options.port ?? 7318;\n    const listenAddress = options.listenAddress ?? 'localhost';\n    \n    this.options = {\n      port,\n      listenAddress,\n      publicAddress: options.publicAddress ?? `http://${listenAddress}:${port}`,\n      verbose: options.verbose ?? false,\n      mock: options.mock ?? false,\n    };\n  \n\n    // Detect if we're running from source or from installed package\n    // @ts-ignore - import.meta is available in ESM builds\n    const currentFileDir = dirname(fileURLToPath(import.meta.url));\n\n    // Check if we're in src directory (development) or dist directory (production)\n    this.isDevelopment = currentFileDir.endsWith('/src') || currentFileDir.endsWith('\\\\src');\n\n    // Get the package root directory\n    if (this.isDevelopment) {\n      // In development: current file is in src/, package root is one level up\n      this.packageDir = dirname(currentFileDir);\n    } else {\n      // In production: current file is in dist/, package root is one level up\n      this.packageDir = dirname(currentFileDir);\n    }\n\n    this.log(`Package directory: ${this.packageDir}`);\n    this.log(`Running in ${this.isDevelopment ? 'development' : 'production'} mode`);\n  }\n\n  async start(): Promise<void> {\n    if (this.serverProcess) {\n      return;\n    }\n\n    // Determine the server file to run\n    let serverFile: string;\n    let cmd: string;\n    let args: string[];\n\n    if (this.isDevelopment) {\n      // Development: run TypeScript file directly with bun\n      serverFile = join(this.packageDir, 'src', 'index.ts');\n      cmd = 'bun';\n      args = [serverFile];\n    } else {\n      // Production: run compiled JavaScript file\n      serverFile = join(this.packageDir, 'dist', 'index.cjs');\n\n      // Check if dist/index.cjs exists, if not try to use bun with src/index.ts as fallback\n      if (!existsSync(serverFile)) {\n        const fallbackFile = join(this.packageDir, 'src', 'index.ts');\n        if (existsSync(fallbackFile)) {\n          this.log('dist/index.cjs not found, falling back to src/index.ts');\n          serverFile = fallbackFile;\n          cmd = 'bun';\n          args = [serverFile];\n        } else {\n          throw new Error(`Inspector server file not found at ${serverFile} or ${fallbackFile}`);\n        }\n      } else {\n        // Use node for compiled CJS in production\n        cmd = 'node';\n        args = [serverFile];\n      }\n    }\n\n    // Add CLI arguments\n    args.push('--port', String(this.options.port));\n    args.push('--listen', this.options.listenAddress);\n    if (this.options.publicAddress ?? `http://${this.options.listenAddress}:${this.options.port}`) {\n      args.push('--public-address', this.options.publicAddress);\n    }\n    if (this.options.verbose) {\n      args.push('--verbose');\n    }\n    if (this.options.mock) {\n      args.push('--mock');\n    }\n\n    this.log(`Starting inspector server: ${cmd} ${args.join(' ')}`);\n    this.log(`Working directory: ${this.packageDir}`);\n\n    // Start the server process\n    this.serverProcess = spawn(cmd, args, {\n      cwd: this.packageDir,\n      env: process.env,\n      stdio: this.options.verbose ? 'inherit' : 'pipe',\n    });\n\n    if (!this.options.verbose && this.serverProcess.stdout) {\n      this.serverProcess.stdout.on('data', (_data) => {\n        // Pipe output for debugging if needed\n      });\n    }\n\n    if (!this.options.verbose && this.serverProcess.stderr) {\n      this.serverProcess.stderr.on('data', (data) => {\n        console.error(`[inspector-server] Error: ${data}`);\n      });\n    }\n\n    this.serverProcess.on('error', (error) => {\n      console.error('[inspector-server] Failed to start:', error);\n    });\n\n    this.serverProcess.on('exit', (code) => {\n      if (code !== 0 && code !== null) {\n        console.error(`[inspector-server] Process exited with code ${code}`);\n      }\n      this.serverProcess = null;\n    });\n\n    // Give server a moment to start\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n\n  async stop(): Promise<void> {\n    if (this.serverProcess) {\n      this.log('Stopping inspector server...');\n\n      // Send SIGTERM for graceful shutdown\n      this.serverProcess.kill('SIGTERM');\n\n      // Wait for process to exit\n      await new Promise<void>((resolve) => {\n        if (!this.serverProcess) {\n          resolve();\n          return;\n        }\n\n        const timeout = setTimeout(() => {\n          // Force kill if not exited after 5 seconds\n          if (this.serverProcess) {\n            this.log('Force killing inspector server...');\n            this.serverProcess.kill('SIGKILL');\n          }\n          resolve();\n        }, 5000);\n\n        this.serverProcess.on('exit', () => {\n          clearTimeout(timeout);\n          resolve();\n        });\n      });\n\n      this.serverProcess = null;\n    }\n  }\n\n\n  private log(message: string): void {\n    if (this.options.verbose) {\n      console.log(`[inspector-plugin] ${message}`);\n    }\n  }\n\n  getInjectScript(cwd?: string): string {\n    const params = new URLSearchParams({\n      ...(cwd && { cwd }),\n    });\n\n    return `<script src=\"${this.options.publicAddress}/inspector-toolbar.js?${params}\" type=\"module\" async></script>`;\n  }\n\n  shouldInject(): boolean {\n    return true;\n  }\n\n}\n\nexport function inspectorPlugin(options: InspectorPluginOptions = {}): Plugin {\n  let serverManager: InspectorServerManager;\n  let projectRoot: string;\n\n  return {\n    name: 'vite-plugin-inspector',\n    // Only apply plugin during development (serve command)\n    apply: 'serve',\n\n    configResolved(config: ResolvedConfig) {\n      projectRoot = config.root;\n      serverManager = new InspectorServerManager(options);\n    },\n\n    async buildStart() {\n      await serverManager.start();\n    },\n\n    transformIndexHtml(html: string) {\n      if (!serverManager || !serverManager.shouldInject()) {\n        return html;\n      }\n\n      // Inject the inspector toolbar script into the HTML\n      const scriptTag = serverManager.getInjectScript(projectRoot);\n\n      // Try to inject before closing body tag, or at the end of HTML\n      if (html.includes('</body>')) {\n        return html.replace('</body>', `${scriptTag}\\n</body>`);\n      } else if (html.includes('</html>')) {\n        return html.replace('</html>', `${scriptTag}\\n</html>`);\n      } else {\n        // Append to the end if no body or html tags found\n        return html + scriptTag;\n      }\n    },\n\n    async closeBundle() {\n      await serverManager.stop();\n    },\n\n    async buildEnd() {\n      // Stop server when build ends (in build mode)\n      if (this.meta.watchMode === false) {\n        await serverManager.stop();\n      }\n    },\n  };\n}\n\n// Default export for convenience\nexport default inspectorPlugin;"],
  "mappings": "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",
  "names": []
}
